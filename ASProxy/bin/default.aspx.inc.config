<script runat="server">
void SetPageOptionsByCookie()
{
	OptionsType opt = ASProxyConfig.GetCookieOptions();
	chkProcessScripts.Checked = opt.Scripts;
	chkProcessLinks.Checked = opt.Links;
	chkDisplayImages.Checked = opt.Images;
	chkBackImage.Checked = opt.BackImages;
	chkForms.Checked = opt.SubmitForms;
	chkCompression.Checked = opt.HttpCompression;
	chkCookies.Checked = opt.AcceptCookies;
	chkOrginalUrl.Checked = opt.DisplayOrginalUrl;
	chkIFrame.Checked = opt.IFrame;
	chkPageTitle.Checked = opt.DisplayPageTitle;
	chkUTF8.Checked = opt.IgnorePageEncoding;
	chkRemoveScripts.Checked = opt.RemoveScripts;
}
OptionsType GetOptionsInForm(OptionsType defaultOptions)
{
	OptionsType opt;
	opt = defaultOptions;
	opt.Scripts = chkProcessScripts.Checked;
	opt.Links = chkProcessLinks.Checked;
	opt.Images = chkDisplayImages.Checked;
	opt.BackImages = chkBackImage.Checked;
	opt.SubmitForms = chkForms.Checked;
	opt.HttpCompression = chkCompression.Checked;
	opt.AcceptCookies = chkCookies.Checked;
	opt.DisplayOrginalUrl = chkOrginalUrl.Checked;
	opt.IFrame = chkIFrame.Checked;
	opt.DisplayPageTitle = chkPageTitle.Checked;
	opt.IgnorePageEncoding = chkUTF8.Checked;
	opt.RemoveScripts = chkRemoveScripts.Checked;
	return opt;
}
void DoFramesetResults(ASProxyEngine resutls)
{
	if (resutls.ResponseInfo.IsFrameSet)
	{
		string result = "";
		if (WebMethods.IsMethod(resutls.RequestInfo.RequestMethod, WebMethods.DefaultMethods.GET))
			result = UrlProvider.AddArgumantsToUrl(FilesConsts.DirectHtmlPage, resutls.RequestInfo.RequestUrl, true);
		else
			result = FilesConsts.DirectHtmlPage + "?" + resutls.RequestInfo.RequestedQueries;
		ltrHtmlBody.Text = HtmlTags.IFrameTag(result, "100%", "600%");
	}
}

void GetResults(ASProxyEngine resutls)
{
	txtUrl.Text = resutls.RequestInfo.RequestUrl;
	try
	{
		MimeContentType pageContentType;
		if (!Common.IsFTPUrl(resutls.RequestInfo.RequestUrl))
		{
			resutls.PreExecution();
			
			if (resutls.LastStatus== LastActivityStatus.Error)
			{
				if (LogSystem.Enabled)
					LogSystem.Log(LogEntity.Error, resutls.RequestInfo.RequestUrl, resutls.LastErrorMessage);
                
				lblErrorMsg.Text = resutls.LastErrorMessage;
				if (string.IsNullOrEmpty(lblErrorMsg.Text))
					lblErrorMsg.Text = "Unknown error on requesting data";
				lblErrorMsg.Visible = true;
				ltrHtmlBody.Text = "";
				return;
			}
			pageContentType = Common.StringToContentType(resutls.ResponseInfo.ContentType);
		}
		else
			pageContentType = MimeContentType.application;

		switch (pageContentType)
		{
			case MimeContentType.application:
				if (WebMethods.IsMethod(resutls.RequestInfo.RequestMethod, WebMethods.DefaultMethods.GET))
					Response.Redirect(UrlProvider.AddArgumantsToUrl(FilesConsts.DownloadPage, resutls.RequestInfo.RequestUrl, true), false);
				else
					Response.Redirect(FilesConsts.DownloadPage + "?" + resutls.RequestInfo.RequestedQueries, false);
				return;
			case MimeContentType.image_gif:
			case MimeContentType.image_jpeg:
				ltrHtmlBody.Text = HtmlTags.ImgTag(UrlProvider.AddArgumantsToUrl(FilesConsts.ImagesPage, resutls.RequestInfo.RequestUrl, true));
				return;
		}
		
		ltrBeforeContent.Text = "</form></body></html>\n";
		ltrHtmlBody.Text = "";
		string responseContent;
		
		// Don't process for these type in default page
		// Since V4.7
		if (pageContentType == MimeContentType.text_css || pageContentType == MimeContentType.text_plain || pageContentType ==MimeContentType.text_javascript)
				resutls.ProcessTypeForData = ProcessTypeForData.None;

		// Execute the request
		resutls.Execute(out responseContent);
		
		// If content is text format
		if (pageContentType == MimeContentType.text_css || pageContentType == MimeContentType.text_plain || pageContentType ==MimeContentType.text_javascript)
			ltrHtmlBody.Text += "<pre>" + HttpUtility.HtmlEncode(responseContent) + "</pre>";
		else
			ltrHtmlBody.Text += responseContent;

		// Set returned query
		txtUrl.Text = resutls.ResponseInfo.ResponseUrl;

		Response.ContentEncoding = resutls.ResponseInfo.ContentEncoding;
		Response.Charset = resutls.ResponseInfo.ContentCharset;

		if (resutls.LastStatus == LastActivityStatus.Error)
		{
			if (LogSystem.Enabled)
				LogSystem.Log(LogEntity.Error, resutls.RequestInfo.RequestUrl, resutls.LastErrorMessage);

			lblErrorMsg.Text = resutls.LastErrorMessage;
			lblErrorMsg.Visible = true;
			ltrHtmlBody.Text = "";
			return;
		}

        if (resutls.Options.DocType)
        {
            Response.Write(resutls.ResponseInfo.DocType);
        }
        Response.Write(resutls.ResponseInfo.PageInitilizerCodes);

		if (resutls.Options.DisplayPageTitle)
		{
			Page.Title = GlobalConsts.ASProxyName + ":: " + resutls.ResponseInfo.ContentPageTitle;
		}
		if (resutls.ResponseInfo.IsFrameSet)
		{
			DoFramesetResults(resutls);
			return;
		}
	}
	catch (ThreadAbortException){}
	catch (Exception err)
	{
        if (LogSystem.Enabled)
            LogSystem.Log(LogEntity.Error, resutls.RequestInfo.RequestUrl, err.Message);

		ltrHtmlBody.Text = "";
		lblErrorMsg.Text = (err.Message);
		lblErrorMsg.Visible = true;
		if (resutls != null && resutls.LastException != null)
			lblErrorMsg.Attributes.Add("ErrorDetails", resutls.LastException.ToString());
	}
	finally
	{
	}
}

void SurfingOnLoading()
{
	// Don't apply operation, if this is post back from asproxy "Display" button only.
	if(Request.Form[btnASProxyDisplayButton.ID]==null)
	{
		SetPageOptionsByCookie();
		if (UrlProvider.IsASProxyAddressUrlIncluded(Request.QueryString))
		{
			ASProxyEngine engine = new ASProxyEngine(ProcessTypeForData.HTML, true);
			engine.RequestInfo.ContentType = MimeContentType.text_html;
			engine.Initialize(Request);
			
			GetResults(engine);
			engine.Dispose();
		}
	}
}

protected void btnDisplay_Click(object sender, EventArgs e)
{
	txtUrl.Text = UrlProvider.CorrectInputUrl(txtUrl.Text);

	ASProxyEngine engine = new ASProxyEngine(ProcessTypeForData.HTML, false);
	engine.Options = GetOptionsInForm(ASProxyConfig.GetCookieOptions());
	engine.RequestInfo.ContentType = MimeContentType.text_html;
	engine.Initialize(txtUrl.Text);
	ASProxyConfig.SetCookieOptions(engine.Options);

	GetResults(engine);
	engine.Dispose();
}

protected void Page_Load(object sender, EventArgs e)
{
	FilesConsts.DefaultPage = System.IO.Path.GetFileName(Request.Url.AbsolutePath).ToLower();
	SurfingOnLoading();
}
</script>